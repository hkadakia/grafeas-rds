// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/theparanoids/grafeas-rds/go/v1beta1/storage (interfaces: Storage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	grafeas_go_proto "github.com/grafeas/grafeas/proto/v1beta1/grafeas_go_proto"
	project_go_proto "github.com/grafeas/grafeas/proto/v1beta1/project_go_proto"
	fieldmaskpb "google.golang.org/protobuf/types/known/fieldmaskpb"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// BatchCreateNotes mocks base method.
func (m *MockStorage) BatchCreateNotes(arg0 context.Context, arg1, arg2 string, arg3 map[string]*grafeas_go_proto.Note) ([]*grafeas_go_proto.Note, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateNotes", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*grafeas_go_proto.Note)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// BatchCreateNotes indicates an expected call of BatchCreateNotes.
func (mr *MockStorageMockRecorder) BatchCreateNotes(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateNotes", reflect.TypeOf((*MockStorage)(nil).BatchCreateNotes), arg0, arg1, arg2, arg3)
}

// BatchCreateOccurrences mocks base method.
func (m *MockStorage) BatchCreateOccurrences(arg0 context.Context, arg1, arg2 string, arg3 []*grafeas_go_proto.Occurrence) ([]*grafeas_go_proto.Occurrence, []error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchCreateOccurrences", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*grafeas_go_proto.Occurrence)
	ret1, _ := ret[1].([]error)
	return ret0, ret1
}

// BatchCreateOccurrences indicates an expected call of BatchCreateOccurrences.
func (mr *MockStorageMockRecorder) BatchCreateOccurrences(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchCreateOccurrences", reflect.TypeOf((*MockStorage)(nil).BatchCreateOccurrences), arg0, arg1, arg2, arg3)
}

// CreateNote mocks base method.
func (m *MockStorage) CreateNote(arg0 context.Context, arg1, arg2, arg3 string, arg4 *grafeas_go_proto.Note) (*grafeas_go_proto.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*grafeas_go_proto.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockStorageMockRecorder) CreateNote(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockStorage)(nil).CreateNote), arg0, arg1, arg2, arg3, arg4)
}

// CreateOccurrence mocks base method.
func (m *MockStorage) CreateOccurrence(arg0 context.Context, arg1, arg2 string, arg3 *grafeas_go_proto.Occurrence) (*grafeas_go_proto.Occurrence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOccurrence", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*grafeas_go_proto.Occurrence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOccurrence indicates an expected call of CreateOccurrence.
func (mr *MockStorageMockRecorder) CreateOccurrence(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOccurrence", reflect.TypeOf((*MockStorage)(nil).CreateOccurrence), arg0, arg1, arg2, arg3)
}

// CreateProject mocks base method.
func (m *MockStorage) CreateProject(arg0 context.Context, arg1 string, arg2 *project_go_proto.Project) (*project_go_proto.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", arg0, arg1, arg2)
	ret0, _ := ret[0].(*project_go_proto.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockStorageMockRecorder) CreateProject(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockStorage)(nil).CreateProject), arg0, arg1, arg2)
}

// DeleteNote mocks base method.
func (m *MockStorage) DeleteNote(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockStorageMockRecorder) DeleteNote(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockStorage)(nil).DeleteNote), arg0, arg1, arg2)
}

// DeleteOccurrence mocks base method.
func (m *MockStorage) DeleteOccurrence(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOccurrence", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOccurrence indicates an expected call of DeleteOccurrence.
func (mr *MockStorageMockRecorder) DeleteOccurrence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOccurrence", reflect.TypeOf((*MockStorage)(nil).DeleteOccurrence), arg0, arg1, arg2)
}

// DeleteProject mocks base method.
func (m *MockStorage) DeleteProject(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockStorageMockRecorder) DeleteProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockStorage)(nil).DeleteProject), arg0, arg1)
}

// GetNote mocks base method.
func (m *MockStorage) GetNote(arg0 context.Context, arg1, arg2 string) (*grafeas_go_proto.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNote", arg0, arg1, arg2)
	ret0, _ := ret[0].(*grafeas_go_proto.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNote indicates an expected call of GetNote.
func (mr *MockStorageMockRecorder) GetNote(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNote", reflect.TypeOf((*MockStorage)(nil).GetNote), arg0, arg1, arg2)
}

// GetOccurrence mocks base method.
func (m *MockStorage) GetOccurrence(arg0 context.Context, arg1, arg2 string) (*grafeas_go_proto.Occurrence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOccurrence", arg0, arg1, arg2)
	ret0, _ := ret[0].(*grafeas_go_proto.Occurrence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccurrence indicates an expected call of GetOccurrence.
func (mr *MockStorageMockRecorder) GetOccurrence(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccurrence", reflect.TypeOf((*MockStorage)(nil).GetOccurrence), arg0, arg1, arg2)
}

// GetOccurrenceNote mocks base method.
func (m *MockStorage) GetOccurrenceNote(arg0 context.Context, arg1, arg2 string) (*grafeas_go_proto.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOccurrenceNote", arg0, arg1, arg2)
	ret0, _ := ret[0].(*grafeas_go_proto.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOccurrenceNote indicates an expected call of GetOccurrenceNote.
func (mr *MockStorageMockRecorder) GetOccurrenceNote(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOccurrenceNote", reflect.TypeOf((*MockStorage)(nil).GetOccurrenceNote), arg0, arg1, arg2)
}

// GetProject mocks base method.
func (m *MockStorage) GetProject(arg0 context.Context, arg1 string) (*project_go_proto.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0, arg1)
	ret0, _ := ret[0].(*project_go_proto.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockStorageMockRecorder) GetProject(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockStorage)(nil).GetProject), arg0, arg1)
}

// GetVulnerabilityOccurrencesSummary mocks base method.
func (m *MockStorage) GetVulnerabilityOccurrencesSummary(arg0 context.Context, arg1, arg2 string) (*grafeas_go_proto.VulnerabilityOccurrencesSummary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVulnerabilityOccurrencesSummary", arg0, arg1, arg2)
	ret0, _ := ret[0].(*grafeas_go_proto.VulnerabilityOccurrencesSummary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVulnerabilityOccurrencesSummary indicates an expected call of GetVulnerabilityOccurrencesSummary.
func (mr *MockStorageMockRecorder) GetVulnerabilityOccurrencesSummary(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVulnerabilityOccurrencesSummary", reflect.TypeOf((*MockStorage)(nil).GetVulnerabilityOccurrencesSummary), arg0, arg1, arg2)
}

// ListNoteOccurrences mocks base method.
func (m *MockStorage) ListNoteOccurrences(arg0 context.Context, arg1, arg2, arg3, arg4 string, arg5 int32) ([]*grafeas_go_proto.Occurrence, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNoteOccurrences", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].([]*grafeas_go_proto.Occurrence)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListNoteOccurrences indicates an expected call of ListNoteOccurrences.
func (mr *MockStorageMockRecorder) ListNoteOccurrences(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNoteOccurrences", reflect.TypeOf((*MockStorage)(nil).ListNoteOccurrences), arg0, arg1, arg2, arg3, arg4, arg5)
}

// ListNotes mocks base method.
func (m *MockStorage) ListNotes(arg0 context.Context, arg1, arg2, arg3 string, arg4 int32) ([]*grafeas_go_proto.Note, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNotes", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*grafeas_go_proto.Note)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListNotes indicates an expected call of ListNotes.
func (mr *MockStorageMockRecorder) ListNotes(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNotes", reflect.TypeOf((*MockStorage)(nil).ListNotes), arg0, arg1, arg2, arg3, arg4)
}

// ListOccurrences mocks base method.
func (m *MockStorage) ListOccurrences(arg0 context.Context, arg1, arg2, arg3 string, arg4 int32) ([]*grafeas_go_proto.Occurrence, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOccurrences", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*grafeas_go_proto.Occurrence)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListOccurrences indicates an expected call of ListOccurrences.
func (mr *MockStorageMockRecorder) ListOccurrences(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOccurrences", reflect.TypeOf((*MockStorage)(nil).ListOccurrences), arg0, arg1, arg2, arg3, arg4)
}

// ListProjects mocks base method.
func (m *MockStorage) ListProjects(arg0 context.Context, arg1 string, arg2 int, arg3 string) ([]*project_go_proto.Project, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProjects", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*project_go_proto.Project)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListProjects indicates an expected call of ListProjects.
func (mr *MockStorageMockRecorder) ListProjects(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProjects", reflect.TypeOf((*MockStorage)(nil).ListProjects), arg0, arg1, arg2, arg3)
}

// SetConnMaxIdleTime mocks base method.
func (m *MockStorage) SetConnMaxIdleTime(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnMaxIdleTime", arg0)
}

// SetConnMaxIdleTime indicates an expected call of SetConnMaxIdleTime.
func (mr *MockStorageMockRecorder) SetConnMaxIdleTime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnMaxIdleTime", reflect.TypeOf((*MockStorage)(nil).SetConnMaxIdleTime), arg0)
}

// SetConnMaxLifetime mocks base method.
func (m *MockStorage) SetConnMaxLifetime(arg0 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetConnMaxLifetime", arg0)
}

// SetConnMaxLifetime indicates an expected call of SetConnMaxLifetime.
func (mr *MockStorageMockRecorder) SetConnMaxLifetime(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetConnMaxLifetime", reflect.TypeOf((*MockStorage)(nil).SetConnMaxLifetime), arg0)
}

// SetMaxIdleConns mocks base method.
func (m *MockStorage) SetMaxIdleConns(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxIdleConns", arg0)
}

// SetMaxIdleConns indicates an expected call of SetMaxIdleConns.
func (mr *MockStorageMockRecorder) SetMaxIdleConns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxIdleConns", reflect.TypeOf((*MockStorage)(nil).SetMaxIdleConns), arg0)
}

// SetMaxOpenConns mocks base method.
func (m *MockStorage) SetMaxOpenConns(arg0 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetMaxOpenConns", arg0)
}

// SetMaxOpenConns indicates an expected call of SetMaxOpenConns.
func (mr *MockStorageMockRecorder) SetMaxOpenConns(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMaxOpenConns", reflect.TypeOf((*MockStorage)(nil).SetMaxOpenConns), arg0)
}

// UpdateNote mocks base method.
func (m *MockStorage) UpdateNote(arg0 context.Context, arg1, arg2 string, arg3 *grafeas_go_proto.Note, arg4 *fieldmaskpb.FieldMask) (*grafeas_go_proto.Note, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*grafeas_go_proto.Note)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockStorageMockRecorder) UpdateNote(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockStorage)(nil).UpdateNote), arg0, arg1, arg2, arg3, arg4)
}

// UpdateOccurrence mocks base method.
func (m *MockStorage) UpdateOccurrence(arg0 context.Context, arg1, arg2 string, arg3 *grafeas_go_proto.Occurrence, arg4 *fieldmaskpb.FieldMask) (*grafeas_go_proto.Occurrence, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOccurrence", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*grafeas_go_proto.Occurrence)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateOccurrence indicates an expected call of UpdateOccurrence.
func (mr *MockStorageMockRecorder) UpdateOccurrence(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOccurrence", reflect.TypeOf((*MockStorage)(nil).UpdateOccurrence), arg0, arg1, arg2, arg3, arg4)
}
